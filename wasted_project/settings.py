"""
Django settings for waste_d project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path
from google.cloud import secretmanager
import logging
import re
from wasted_project import DJANGO_ENV_DEV, DJANGO_ENV_PROD

log = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

pid = os.getpid()
log.info("[%d] Django environment determined as: %s" % (pid, os.environ['DJANGO_ENV']))

# GCP Cloud Run environment:
# HOME=/home/app-user
# LANG=C.UTF-8
# GPG_KEY=[-redacted-]
# PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
# GCP_STATIC_URL=[-redacted-]
# PWD=/wasted_django'
# GCP_RUN_HOSTS=[-redacted-]
# K_CONFIGURATION=waste-d
# PORT=8000
# K_SERVICE=waste-d
# PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/fa7dc83944936bf09a0e4cb5d5ec852c0d256599/get-pip.py'
# PYTHON_VERSION=3.8.6
# PYTHON_GET_PIP_SHA256=6e0bb0a2c2533361d7f297ed547237caf1b7507f197835974c0dd7eba998c53c
# GOOGLE_CLOUD_PROJECT=[-redacted-]
# K_REVISION=[-redacted-]
# PYTHON_PIP_VERSION=20.2.4
# PYTHONUNBUFFERED=TRUE
# APP_HOME=/wasted_django
# SERVER_SOFTWARE=gunicorn/20.0.4
# DJANGO_ENV=Production
# DJANGO_SETTINGS_MODULE=wasted_project.settings

# Create the Secret Manager client.
client = secretmanager.SecretManagerServiceClient()

# Get the Django secrect key
secret_path = "projects/%s/secrets/%s/versions/latest" % (os.environ['GOOGLE_CLOUD_PROJECT'], 'django-secret_key')
response = client.access_secret_version(request={"name": secret_path})
SECRET_KEY = response.payload.data.decode("UTF-8")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
if "GCP_RUN_HOSTS" in os.environ:
    ALLOWED_HOSTS.extend(os.environ['GCP_RUN_HOSTS'].split(','))

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'django_cloud_tasks',
    # Own ones:
    'waste_d.apps.WastedConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'waste_d.datastore.cloud-ndb.django_middleware.ndb_django_middleware'
]

ROOT_URLCONF = 'wasted_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['waste_d/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wasted_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

secret_path = "projects/%s/secrets/%s/versions/latest" % (os.environ['GOOGLE_CLOUD_PROJECT'], 'mysql-app-user')
response = client.access_secret_version(request={"name": secret_path})
mysql_hostname = '68.171.228.35.bc.googleusercontent.com'
mysql_database = 'waste.d'
mysql_user = 'wappd'
mysql_password = response.payload.data.decode("UTF-8")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': mysql_hostname,
        'USER': mysql_user,
        'PASSWORD': mysql_password,
        'NAME': mysql_database,
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

MEDIA_URL = None
if "GCP_STATIC_URL" in os.environ:
    STATIC_URL = os.environ['GCP_STATIC_URL']
    log.info("Serving static files from: %s" % STATIC_URL)
else:
    log.info("Serving static files from Django")
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [
        "%s/static" % BASE_DIR,
    ]

# Tasks:
# Note: All tasks will point to given URL. Additional handler-argument will identify actual task.
if os.environ['GCP_TASKS_REGION']:
    DJANGO_CLOUD_TASKS = {
        'project_location_name': 'projects/%s/locations/%s' % (
            os.environ['GOOGLE_CLOUD_PROJECT'], os.environ['GCP_TASKS_REGION']
        ),
        'task_handler_root_url': '/_tasks/',
    }
    DJANGO_CLOUD_TASKS_EXECUTE_LOCALLY = False
    DJANGO_CLOUD_TASKS_REGION = os.environ['GCP_TASKS_REGION']
else:
    DJANGO_CLOUD_TASKS = {
        'project_location_name': '',
        'task_handler_root_url': '/_tasks/',
    }
    # This setting allows you to debug your cloud tasks by running actual task handler function locally
    # instead of sending them to the task queue. Default: False
    DJANGO_CLOUD_TASKS_EXECUTE_LOCALLY = True

# If False, running `.execute()` on remote task will simply log the task data instead of adding it to
# the queue. Useful for debugging. Default: True
DJANGO_CLOUD_TASKS_BLOCK_REMOTE_TASKS = False
